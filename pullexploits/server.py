import socket, re, sys
from threading import Thread
from subprocess import check_output
TCP_PORT = 9001
BUFFER_SIZE = 1024

class ClientThread(Thread):

    def __init__(self,ip,port,sock,files,file):
        Thread.__init__(self)
        self.file = file
        self.files = files
        self.ip = ip
        self.port = port
        self.sock = sock
        print(" New thread started for "+ip+":"+str(port))

    def run(self):
        if self.files[0] != "listfile":
            file = f"exploits/{self.file}"
        else:
            file = self.file
        print(f"Openning {file}")
        f = open(file,'rb')
        while True:
            l = f.read(BUFFER_SIZE)
            while (l):
                self.sock.send(l)
                #print('Sent ',repr(l))
                l = f.read(BUFFER_SIZE)
            if not l:
                f.close()
                self.sock.close()
                break

def startserver(TCP_IP, files):
    tcpsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcpsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    tcpsock.bind((TCP_IP, TCP_PORT))
    threads = []
    for file in files:
        tcpsock.listen(5)
        print("Waiting for incoming connections...")
        (conn, (ip,port)) = tcpsock.accept()
        print('Got connection from ', (ip,port))
        newthread = ClientThread(ip,port,conn,files,file)
        newthread.start()
        threads.append(newthread)

    for t in threads:
        t.join()

def startclient(TCP_IP,file):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((TCP_IP, TCP_PORT))
    with open(file, 'wb') as f:
        print('file opened')
        while True:
            #print('receiving data...')
            data = s.recv(BUFFER_SIZE)
            print('data =', (data).decode("utf-8").strip())
            if not data:
                f.close()
                print('file close()')
                break
            # write data to a file
            f.write(data)

    print(f'{file} file transfered')
    s.close()
    print('connection closed')


def get_ip():
    valid_ips = 0
    ips = check_output(['hostname', '--all-ip-addresses']).decode("utf-8").split()
    print("Which ip address would you like to use?\n")
    for index, ip in enumerate(ips):
        pattern = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
        test = pattern.match(ip)
        if test:
            print(f"{index} - {ip}\n")
            valid_ips +=1
    # Outputing ip options
    try:
        choice = int(input(">"))
        if choice in range(valid_ips):
                return ips[choice]
        else:
                print("Exiting...")
                sys.exit(2)
    except:
        print("Exiting...")
        sys.exit(2)
